from langchain.prompts import ChatPromptTemplate
from database_connection import DatabaseType
from sqlalchemy import Engine, text
from llm import llm
import json
import re

llm = llm()

def generate_sql_queries(
      natural_language_query: str,
      database_structure: str,
      db_type: DatabaseType
      ) -> str:
    """Convert natural language to precise SQL query

    Args:
        natural_language_query: user query in plain english
        database_structure: schema of the database
        db_type: type of database
    """

    system_template = """You are a professional SQL query generator with deep database understanding."""

    user_template = """
    - Role: Intelligent Database Query Resolution Agent
    - Operational Mode: Reasoning-driven, Action-oriented Problem Solving
    - Primary Objective: Systematically Transform Natural Language to Precise {db_type} SQL Queries

        ### THOUGHT Process:
        - Carefully analyze the natural language request
        - Break down the query into semantic components
        - Identify required database interactions
        - Plan query strategy

        ### ACTION Selection:
        - Choose appropriate SQL query construction method
        - Determine necessary database tables
        - Plan join strategies
        - Identify potential filtering requirements

        ### OBSERVATION Validation:
        - Verify query logic
        - Check potential query performance
        - Ensure semantic alignment with original request


    - Natural Language Request: {query}
    - Database Schema: {schema}

        ### Reasoning Cycle:
        1. Initial Thought: Analyze query intent
        2. Action Plan: Determine query strategy
        3. SQL Query Construction
        4. Query Validation
        5. Final Output Generation


        ### ACTION STRATEGY
        - Select most relevant tables
        - Determine optimal join conditions
        - Choose appropriate aggregation methods
        - Apply precise filtering techniques

    ### OBSERVATION VALIDATION
        - Check query logic alignment
        - Verify data retrieval accuracy
        - Ensure query efficiency

    ## CONSTRAINTS
        - Strictly SELECT queries
        - No data modification
        - Maximum query complexity: Moderate
        - Focus on direct information retrieval
        - Performance-optimized queries

    ## Output Format
        Return only Final Output Generation
        
    """
    
    promt_template = ChatPromptTemplate.from_messages(
        [
            ("system", system_template),
            ("user", user_template)
        ])

    formatted_message = promt_template.format_messages(
        query=natural_language_query,
        schema=database_structure,
        db_type=db_type.value
        )

    response = llm(formatted_message)

    return response.content



def validate_querie(query):
    """Clean and extract pure SQL query
    Args:
        args: response after parse
    """
     
    # Patterns to match SQL within markdown or surrounding text
    sql_patterns = [
        r'```sql\n(.*?)\n```',  # Markdown code block with specific "sql" language
        r'```(.*?)\n```'  # General markdown code block (no specific language)
    ]
    
    for pattern in sql_patterns:
        match = re.search(pattern, query, re.DOTALL | re.IGNORECASE)
        if match:
            # Clean up the matched query
            clean_query = match.group(1) if len(match.groups()) > 0 else match.group(0)
            clean_query = clean_query.strip()
            
            # Additional sanitization
            clean_query = re.sub(r'\s+', ' ', clean_query)  # Normalize whitespace
            clean_query = clean_query.replace('\n', ' ')   # Remove newlines
            
            return clean_query
    
    # Fallback: return original query if no match found
    return query.strip()   


def parse_query(query):
    """Clean and extract pure SQL query
        Args:
            query: Response generated by llm
    """
    system_template = """You are helpful AI Assistant your task is to extract Final
    SQL query from given Text.
    """

    user_template = """
      - Role: Intelligent Query Extracter
      - Operational Mode: Reasoning-driven, Action-oriented Problem Solving
      - Primary Objective: Extract SQL query from given text
        text: {query}
        ### CONSTRAINTS Process:
          - return only SQL query 
    """

    template = ChatPromptTemplate.from_messages(
      [
          ("system", system_template),
          ("user", user_template)
      ])
    
    formatted_message = template.format_messages(
      query=query)
    
    return llm(formatted_message).content


def create_sql(
      natural_language_query: str,
      database_structure: str,
      db_type: DatabaseType
      ) -> str:
    """Convert natural language to precise SQL query

    Args:
        natural_language_query: user query in plain english
        database_structure: schema of the database
        db_type: type of database
    """

    llm_response = generate_sql_queries(
        natural_language_query,
        database_structure,
        db_type
        )
    
    parse_response = parse_query(llm_response)
    final_query = validate_querie(parse_response)

    return final_query

def execute_query(query: str, engine: Engine):
  """Execute a SQL query and return results"""
  with engine.connect() as connection:
      try:
        result = connection.execute(text(query))
        columns = result.keys()
        return [{c:r for c, r in zip(columns, row)} for row in result]
      except Exception as e:
        return [{'error': str(e)}]
      

    


